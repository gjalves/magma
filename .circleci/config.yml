version: 2.1

refs:
  only_master: &only_master
    filters:
      branches:
        only: master

aliases:
  - &appdir
    working_directory: "nms/app"

executors:
  node:
    docker:
      - image: circleci/node:10-buster-browsers-legacy

orbs:
  artifactory: circleci/artifactory@0.0.7

  docker:
    commands:
      install-dc:
        parameters:
          compose_version:
            description: Docker-compose version to install
            type: string
            default: '1.25.4'
        steps:
          - run:
              name: Install Docker Compose
              command: |
                sudo curl -L https://github.com/docker/compose/releases/download/<<parameters.compose_version>>/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
                sudo chmod +x ~/docker-compose
                sudo mv ~/docker-compose /usr/local/bin/docker-compose

  build:
    commands:
      determinator:
        parameters:
          paths:
            description: Space seperated list of paths to tests against.
            type: string
        steps:
          - run:
              name: Checking for changes
              command: |
                paths=".circleci <<parameters.paths>>"
                echo "Checking paths [$paths]"
                for path in $paths; do
                  if [[ $(git diff master^ --name-only $path) ]]; then
                    echo "Found changes in $path"
                    exit 0
                  fi
                done
                echo "No changes in [$paths]"
                circleci step halt

commands:
  run-with-retry:
    description: Run command with retry
    parameters:
      command:
        description: Command to run
        type: string
      workdir:
        description: Path to cd into
        type: string
      retry-count:
        description: Number of retry
        type: integer
        default: 3
      sleep:
        description: Wait duration until next retry
        type: integer
        default: 5
    steps:
      - run: |
          retry() {
             MAX_RETRY=<< parameters.retry-count >>
             n=0
             until [ $n -ge $MAX_RETRY ]
             do
                "$@" && break
                n=$[$n+1]
                sleep << parameters.sleep >>
             done
             if [ $n -ge $MAX_RETRY ]; then
               echo "failed: ${@}" >&2
               exit 1
             fi
          }
          cd << parameters.workdir >>
          retry << parameters.command >>

  yarn-install:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "nms/app/yarn.lock" }}
      - run:
          name: Install Dependencies
          <<: *appdir
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "nms/app/yarn.lock" }}
          paths:
            - ~/.cache/yarn

jobs:
  ### CLOUD

  cloud-test:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
    steps:
      - checkout
      - docker/install-dc
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -t

  insync-checkin:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
    steps:
      - checkout
      - docker/install-dc
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -g
      - run: sudo chown -R circleci $MAGMA_ROOT/*
      - run: git add .
      - run: git status
      - run: git diff-index --quiet HEAD

  orc8r-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MODULE_DIR=/home/circleci/project
      - MAGMA_ROOT=/home/circleci/project
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
    steps:
      - checkout
      - docker/install-dc
      - run: sudo apt-get update
      - run:
          name: "Set Python Version"
          command: pyenv global 3.7.0
      - run: pip3 install PyYAML
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/cloud/docker
            python3 build.py -a --nocache --parallel
      # TODO: docker login and push here

  ### GATEWAY

  orc8r-gateway-test:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/orc8r/gateway/go
            go test ./...
            go vet ./...

  feg-precommit:
    docker:
      - image: circleci/golang:1.13-stretch-node-browsers-legacy
    environment:
      - GO111MODULE=on
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          name: make feg precommit
          command: |
            cd ${MAGMA_ROOT}/feg/gateway
            make -C ${MAGMA_ROOT}/feg/gateway precommit

  feg-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
    steps:
      - checkout
      - run:
          command: |
            cd ${MAGMA_ROOT}/feg/gateway/docker
            DOCKER_REGISTRY=feg_ docker-compose build --parallel
      # TODO: docker login and push here

  cwag-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
         command: go mod download
         workdir: ${MAGMA_ROOT}/cwf/gateway
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway
            make -C ${MAGMA_ROOT}/cwf/gateway precommit

  cwag-deploy:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - DOCKER_REGISTRY=cwf_
    steps:
      - checkout
      - docker/install-dc
      - run:
          name: Create appropriate build tag for upgrades
          command: |
            set +o pipefail

            cd ${MAGMA_ROOT}/circleci
            mkdir -p versions

            hash=$(git rev-parse HEAD)
            container_version=${hash:0:8}
            echo ${container_version} > versions/cwag_version
      - run:
          name: Build CWAG containers
          command: |
            cd ${MAGMA_ROOT}/cwf/gateway/docker
            docker-compose -f docker-compose.yml -f docker-compose.override.yml build --parallel
      # TODO: login and push
      - persist_to_workspace:
          # can't reference env vars in the yaml so we'll repeat the path
          root: ~/project/circleci
          paths:
            - versions/cwag_version

  lte-test:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - MAGMA_ROOT=/home/circleci/project
      - PYTHON_BUILD=${MAGMA_ROOT}/build
      - PIP_CACHE_HOME=${MAGMA_ROOT}/.pipcache
      - MAGMA_DEV_MODE=1
      - SKIP_SUDO_TESTS=1
      - CODEGEN_ROOT=/home/circleci/project/.codegen
      - SWAGGER_CODEGEN_JAR=/home/circleci/project/.codegen/swagger-codegen-cli.jar
    steps:
      - checkout
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y libsystemd-dev pkg-config curl zip unzip
      - run: sudo apt-get install -y virtualenv python-babel python-dev build-essential python3-setuptools python-setuptools autogen autoconf libtool python3-apt python3-aioeventlet python3-requests python3-pip python-protobuf
      - run:
          command: |
            sudo curl -Lfs https://github.com/google/protobuf/releases/download/v3.1.0/protoc-3.1.0-linux-x86_64.zip -o protoc3.zip
            sudo unzip protoc3.zip -d protoc3
            sudo mv protoc3/bin/protoc /bin/protoc
            sudo chmod a+rx /bin/protoc
            sudo mv protoc3/include/google /usr/include/
            sudo chmod -R a+Xr /usr/include/google
            sudo rm -rf protoc3.zip protoc3
            mkdir ${CODEGEN_ROOT}
            wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.2.3/swagger-codegen-cli-2.2.3.jar -O $SWAGGER_CODEGEN_JAR
            make -C $MAGMA_ROOT/lte/gateway/python test_all

  ## CWF OPERATOR

  cwf-operator-precommit:
    docker:
      - image: circleci/golang:1.13-buster-node-browsers-legacy
    environment:
      - GO111MODULE=on
      - GOPROXY=https://proxy.golang.org
    steps:
      - checkout
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run: ./circleci/golang_before_install.sh
      - run-with-retry:
          command: go mod download
          workdir: ${MAGMA_ROOT}/cwf/k8s/cwf_operator
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator
            make -C ${MAGMA_ROOT}/cwf/k8s/cwf_operator precommit

  cwf-operator-build:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: true
    environment:
      - NMS_ROOT=/home/circleci/project/fbcode/magma/magma/symphony/app/fbcnms-projects/magmalte
      - MAGMA_MODULES_FILE=/home/circleci/project/circleci/modules.yml
      - MAGMA_ROOT=/home/circleci/project
    steps:
      - checkout
      - docker/install-dc
      - run:
          command: |
            cd ${MAGMA_ROOT}/cwf/k8s/cwf_operator/docker
            DOCKER_REGISTRY=cwf_ docker-compose build --parallel
      # TODO: docker login and push here

  ### NMS

  nms-flow-test:
    executor: node
    steps:
      - checkout
      - run:
          name: install flow
          <<: *appdir
          # Extract the specified flow version from the .flowconfig
          command: yarn add --dev -W flow-bin@$(x=$(grep "\[version\]" .flowconfig -A 1 | tail -n 1); echo ${x:1})
      - yarn-install
      - run:
          name: flow typecheck
          <<: *appdir
          command: yarn run flow

  eslint:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          name: eslint
          <<: *appdir
          command: yarn run eslint ./

  nms-yarn-test:
    executor: node
    steps:
      - checkout
      - yarn-install
      - run:
          name: yarn test
          <<: *appdir
          command: yarn test:ci

  nms-build:
    machine:
      image: ubuntu-1604:201903-01
    environment:
      - NMS_ROOT=${MAGMA_ROOT}/nms/app/fbcnms-projects/magmalte
    steps:
      - checkout
      - docker/install-dc
      - run: echo 'export MAGMA_ROOT=$(pwd)' >> $BASH_ENV
      - run:
          command: |
            cd ${MAGMA_ROOT}/nms/app/fbcnms-projects/magmalte
            docker-compose build magmalte

  ### FOSSA

  fossa-analyze:
    docker:
      - image: ubuntu:xenial
    working_directory: /tmp/magma
    environment:
      - MAGMA_ROOT=/tmp/magma
    steps:
      - checkout
      - run: apt update
      - run: apt install -y wget
      - run: wget https://github.com/fossas/fossa-cli/releases/download/v1.0.11/fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: bash -c 'sha256sum fossa-cli_1.0.11_linux_amd64.tar.gz | grep -q 0e20286630a9bc5a17408c81e6ba9003f91a14fdd680b96ca4def400693e028e'
      - run: rm -f /tmp/magma/fossa
      - run: tar xzf fossa-cli_1.0.11_linux_amd64.tar.gz
      - run: cp /tmp/magma/fossa /usr/local/bin/
      - run: ${MAGMA_ROOT}/circleci/fossa-analyze-go.sh

  ### DOCUSAURUS

  docusaurus_build_and_deploy:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - checkout
      - run:
          name: Setup docusaurus expected directory structure
          command: |
            mv docs/docusaurus website/
            mv docs/readmes readmes/
            rm -rf docs/
            mv readmes/ docs/
      - run:
          name: Deploying to GitHub Pages
          command: |
            git config --global user.email "docusaurus-bot@users.noreply.github.com"
            git config --global user.name "docusaurus-bot"
            echo "machine github.com login docusaurus-bot password $GITHUB_TOKEN" > ~/.netrc
            cd website && yarn install
            CUSTOM_COMMIT_MESSAGE="[skip ci] Deploy website" GIT_USER=docusaurus-bot yarn run publish-gh-pages

workflows:
  version: 2.1

  cloud:
    jobs:
      - cloud-test
      - insync-checkin
      - orc8r-build:
          requires:
            - cloud-test
            - insync-checkin

  lib_gateway:
    jobs:
      - orc8r-gateway-test

  agw:
    jobs:
      - lte-test
    # TODO: migrate LTE integ test and build here. We can get rid of lte-test after that

  feg:
    jobs:
      - feg-precommit
      - feg-build:
          requires:
            - feg-precommit

  cwag:
    jobs:
      - cwag-precommit
      - cwag-deploy:
          requires:
            - cwag-precommit
      # TODO: migrate CWF integ test here

  cwf_operator:
    jobs:
      - cwf-operator-precommit
      - cwf-operator-build

  nms:
    jobs:
      - nms-flow-test
      - eslint
      - nms-yarn-test:
          requires:
            - nms-flow-test
      - nms-build:
          requires:
            - nms-flow-test
            - eslint
            - nms-yarn-test

  # docusaurus
  #   jobs:
  #     - docusaurus_build_and_deploy:
  #         <<: *only_master

  fossa:
    jobs:
      - fossa-analyze:
          <<: *only_master
