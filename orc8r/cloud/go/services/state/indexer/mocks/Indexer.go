// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import indexer "magma/orc8r/cloud/go/services/state/indexer"
import mock "github.com/stretchr/testify/mock"
import state "magma/orc8r/cloud/go/services/state"
import storage "magma/orc8r/cloud/go/storage"

// Indexer is an autogenerated mock type for the Indexer type
type Indexer struct {
	mock.Mock
}

// CompleteReindex provides a mock function with given fields: from, to
func (_m *Indexer) CompleteReindex(from uint64, to uint64) {
	_m.Called(from, to)
}

// GetID provides a mock function with given fields:
func (_m *Indexer) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSubscriptions provides a mock function with given fields:
func (_m *Indexer) GetSubscriptions() []indexer.Subscription {
	ret := _m.Called()

	var r0 []indexer.Subscription
	if rf, ok := ret.Get(0).(func() []indexer.Subscription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]indexer.Subscription)
		}
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *Indexer) GetVersion() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Index provides a mock function with given fields: reporterHWID, states
func (_m *Indexer) Index(reporterHWID string, states []state.State) (map[storage.TypeAndKey]error, error) {
	ret := _m.Called(reporterHWID, states)

	var r0 map[storage.TypeAndKey]error
	if rf, ok := ret.Get(0).(func(string, []state.State) map[storage.TypeAndKey]error); ok {
		r0 = rf(reporterHWID, states)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[storage.TypeAndKey]error)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []state.State) error); ok {
		r1 = rf(reporterHWID, states)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareReindex provides a mock function with given fields: from, to, isFirstReindex
func (_m *Indexer) PrepareReindex(from uint64, to uint64, isFirstReindex bool) {
	_m.Called(from, to, isFirstReindex)
}
