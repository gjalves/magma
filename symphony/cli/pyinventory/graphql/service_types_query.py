#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from gql.gql.client import OperationException
from gql.gql.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from .property_type_fragment import PropertyTypeFragment, QUERY as PropertyTypeFragmentQuery

QUERY: List[str] = PropertyTypeFragmentQuery + ["""
query ServiceTypesQuery {
  serviceTypes {
    edges {
      node {
        id
        name
        hasCustomer
        propertyTypes {
          ...PropertyTypeFragment
        }
      }
    }
  }
}

"""]

@dataclass
class ServiceTypesQuery(DataClassJsonMixin):
    @dataclass
    class ServiceTypesQueryData(DataClassJsonMixin):
        @dataclass
        class ServiceTypeConnection(DataClassJsonMixin):
            @dataclass
            class ServiceTypeEdge(DataClassJsonMixin):
                @dataclass
                class ServiceType(DataClassJsonMixin):
                    @dataclass
                    class PropertyType(PropertyTypeFragment):
                        pass

                    id: str
                    name: str
                    hasCustomer: bool
                    propertyTypes: List[PropertyType]

                node: Optional[ServiceType]

            edges: List[ServiceTypeEdge]

        serviceTypes: Optional[ServiceTypeConnection]

    data: ServiceTypesQueryData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient) -> Optional[ServiceTypesQueryData.ServiceTypeConnection]:
        # fmt: off
        variables = {}
        try:
            start_time = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            res = cls.from_json(response_text).data
            elapsed_time = perf_counter() - start_time
            client.reporter.log_successful_operation("ServiceTypesQuery", variables, elapsed_time)
            return res.serviceTypes
        except OperationException as e:
            raise FailedOperationException(
                client.reporter,
                e.err_msg,
                e.err_id,
                "ServiceTypesQuery",
                variables,
            )
