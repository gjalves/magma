#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field
from datetime import datetime
from gql.gql.datetime_utils import fromisoformat
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json
from marshmallow import fields as marshmallow_fields

from .add_equipment_input import AddEquipmentInput


DATETIME_FIELD = field(
    metadata={
        "dataclasses_json": {
            "encoder": datetime.isoformat,
            "decoder": fromisoformat,
            "mm_field": marshmallow_fields.DateTime(format="iso"),
        }
    }
)


@dataclass_json
@dataclass
class AddEquipmentMutation:
    __QUERY__ = """
    mutation AddEquipmentMutation($input: AddEquipmentInput!) {
  addEquipment(input: $input) {
    id
    name
  }
}

    """

    @dataclass_json
    @dataclass
    class AddEquipmentMutationData:
        @dataclass_json
        @dataclass
        class Equipment:
            id: str
            name: str

        addEquipment: Optional[Equipment] = None

    data: Optional[AddEquipmentMutationData] = None
    errors: Optional[Any] = None

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, input: AddEquipmentInput):
        # fmt: off
        variables = {"input": input}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
