#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from gql.gql.client import OperationException
from gql.gql.reporter import FailedOperationException
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional
from time import perf_counter
from dataclasses_json import DataClassJsonMixin

from .customer_fragment import CustomerFragment, QUERY as CustomerFragmentQuery
from .add_customer_input import AddCustomerInput


QUERY: List[str] = CustomerFragmentQuery + ["""
mutation AddCustomerMutation($input: AddCustomerInput!) {
  addCustomer(input: $input) {
    ...CustomerFragment
  }
}

"""]

@dataclass
class AddCustomerMutation(DataClassJsonMixin):
    @dataclass
    class AddCustomerMutationData(DataClassJsonMixin):
        @dataclass
        class Customer(CustomerFragment):
            pass

        addCustomer: Customer

    data: AddCustomerMutationData

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, input: AddCustomerInput) -> AddCustomerMutationData.Customer:
        # fmt: off
        variables = {"input": input}
        try:
            start_time = perf_counter()
            response_text = client.call(''.join(set(QUERY)), variables=variables)
            res = cls.from_json(response_text).data
            elapsed_time = perf_counter() - start_time
            client.reporter.log_successful_operation("AddCustomerMutation", variables, elapsed_time)
            return res.addCustomer
        except OperationException as e:
            raise FailedOperationException(
                client.reporter,
                e.err_msg,
                e.err_id,
                "AddCustomerMutation",
                variables,
            )
