#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass
from datetime import datetime
from gql.gql.datetime_utils import DATETIME_FIELD
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json


@dataclass_json
@dataclass
class LocationTypeLocationsQuery:
    __QUERY__ = """
    query LocationTypeLocationsQuery($id: ID!) {
  locationType: node(id: $id) {
    ... on LocationType {
      locations {
        edges {
          node {
            id
            name
            latitude
            longitude
            externalId
            locationType {
              name
            }
          }
        }
      }
    }
  }
}

    """

    @dataclass_json
    @dataclass
    class LocationTypeLocationsQueryData:
        @dataclass_json
        @dataclass
        class Node:
            @dataclass_json
            @dataclass
            class LocationConnection:
                @dataclass_json
                @dataclass
                class LocationEdge:
                    @dataclass_json
                    @dataclass
                    class Location:
                        @dataclass_json
                        @dataclass
                        class LocationType:
                            name: str

                        id: str
                        name: str
                        latitude: Number
                        longitude: Number
                        locationType: LocationType
                        externalId: Optional[str] = None

                    node: Optional[Location] = None

                edges: List[LocationEdge]

            locations: Optional[LocationConnection] = None

        locationType: Optional[Node] = None

    data: Optional[LocationTypeLocationsQueryData] = None
    errors: Optional[Any] = None

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, id: str):
        # fmt: off
        variables = {"id": id}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
