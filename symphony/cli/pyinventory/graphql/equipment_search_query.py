#!/usr/bin/env python3
# @generated AUTOGENERATED file. Do not Change!

from dataclasses import dataclass, field
from datetime import datetime
from gql.gql.datetime_utils import fromisoformat
from gql.gql.graphql_client import GraphqlClient
from functools import partial
from numbers import Number
from typing import Any, Callable, List, Mapping, Optional

from dataclasses_json import dataclass_json
from marshmallow import fields as marshmallow_fields

from .equipment_filter_input import EquipmentFilterInput


DATETIME_FIELD = field(
    metadata={
        "dataclasses_json": {
            "encoder": datetime.isoformat,
            "decoder": fromisoformat,
            "mm_field": marshmallow_fields.DateTime(format="iso"),
        }
    }
)


@dataclass_json
@dataclass
class EquipmentSearchQuery:
    __QUERY__ = """
    query EquipmentSearchQuery($filters: [EquipmentFilterInput!]!, $limit: Int) {
  equipmentSearch(filters: $filters, limit: $limit) {
    equipment {
      id
      name
    }
    count
  }
}

    """

    @dataclass_json
    @dataclass
    class EquipmentSearchQueryData:
        @dataclass_json
        @dataclass
        class EquipmentSearchResult:
            @dataclass_json
            @dataclass
            class Equipment:
                id: str
                name: str

            equipment: List[Equipment]
            count: int

        equipmentSearch: EquipmentSearchResult

    data: Optional[EquipmentSearchQueryData] = None
    errors: Optional[Any] = None

    @classmethod
    # fmt: off
    def execute(cls, client: GraphqlClient, filters: List[EquipmentFilterInput] = [], limit: Optional[int] = None):
        # fmt: off
        variables = {"filters": filters, "limit": limit}
        response_text = client.call(cls.__QUERY__, variables=variables)
        return cls.from_json(response_text).data
